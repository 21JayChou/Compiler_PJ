A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar N:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar newline:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn factor(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar sum:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal sum = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit (
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit n+
											|--A_arithExpr 
												|--A_exprUnit 1))){

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit (
															|--A_arithExpr 
																|--A_arithBiOpExpr 
																	|--A_arithExpr 
																		|--A_exprUnit n/
																	|--A_arithExpr 
																		|--A_exprUnit i)*
													|--A_arithExpr 
														|--A_exprUnit i)==
										|--A_exprUnit n)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal sum = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit sum+
												|--A_arithExpr 
													|--A_exprUnit i;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit sum;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 24);

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal N = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 4;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal newline = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar m:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal m = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1478;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar t:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 31);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_fnCall factor(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit m);
}
